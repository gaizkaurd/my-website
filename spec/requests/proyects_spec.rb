require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/proyects', type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Proyect. As you add validations to Proyect, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {name: 'MyString', description: 'MyString', start_time: '2020-01-01', end_time: '2020-01-02', active: false, 
content: 'MyText', repo: 'https://github.com/gaizkaurd/my-website'}
  end

  let(:invalid_attributes) do
    {description: 'MyString', start_time: '2020-01-01', end_time: '2010-01-02', active: false, content: 'MyText', 
invalid: 'asdsd'}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Proyect.create! valid_attributes
      get proyects_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      proyect = Proyect.create! valid_attributes
      get proyect_url(proyect)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_proyect_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      proyect = Proyect.create! valid_attributes
      get edit_proyect_url(proyect)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Proyect' do
        expect do
          post proyects_url, params: { proyect: valid_attributes }
        end.to change(Proyect, :count).by(1)
      end

      it 'redirects to the created proyect' do
        post proyects_url, params: { proyect: valid_attributes }
        expect(response).to redirect_to(proyect_url(Proyect.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Proyect' do
        expect do
          post proyects_url, params: { proyect: invalid_attributes }
        end.not_to change(Proyect, :count)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post proyects_url, params: { proyect: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {name: 'Cambio a prueba'}
      end

      it 'updates the requested proyect' do
        proyect = Proyect.create! valid_attributes
        patch proyect_url(proyect), params: { proyect: new_attributes.merge(valid_attributes) }
        proyect.reload
        expect(response).to(have_http_status(:redirect))
      end

      it 'redirects to the proyect' do
        proyect = Proyect.create! valid_attributes
        patch proyect_url(proyect), params: { proyect: new_attributes }
        proyect.reload
        expect(response).to redirect_to(proyect_url(proyect))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        proyect = Proyect.create! valid_attributes
        patch proyect_url(proyect), params: { proyect: invalid_attributes }
        expect(response).to redirect_to(proyect_url(proyect))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested proyect' do
      proyect = Proyect.create! valid_attributes
      expect do
        delete proyect_url(proyect)
      end.to change(Proyect, :count).by(-1)
    end

    it 'redirects to the proyects list' do
      proyect = Proyect.create! valid_attributes
      delete proyect_url(proyect)
      expect(response).to redirect_to(proyects_url)
    end
  end
end
